/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Icon;

public class p_Menu extends javax.swing.JPanel {

    public ArrayList<p_Menu> getSubMenu() {
        return subMenu;
    }

    private final ArrayList<p_Menu> subMenu = new ArrayList<>();
    private ActionListener act;
    
    public p_Menu(Icon icon, boolean sbm, Icon iconSub, String Teks, ActionListener act, p_Menu... subMenu) {
        initComponents();
        
        iconMenu.setIcon(icon);
        iconSubMenu.setIcon(iconSub);
        tMenu.setText(Teks);
        iconSubMenu.setVisible(sbm);

        if (act != null) {
            this.act = act;

        }
        this.setSize(new Dimension(Integer.MAX_VALUE, 60));
        this.setMaximumSize(new Dimension(Integer.MAX_VALUE, 60));
        this.setMinimumSize(new Dimension(Integer.MAX_VALUE, 60));
        for (int i = 0; i < subMenu.length; i++) {
            this.subMenu.add(subMenu[i]);
            subMenu[i].setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pDasar = new javax.swing.JPanel();
        tMenu = new javax.swing.JLabel();
        iconSubMenu = new javax.swing.JLabel();
        iconMenu = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 153, 255));
        setPreferredSize(new java.awt.Dimension(228, 50));

        pDasar.setBackground(new java.awt.Color(153, 153, 255));
        pDasar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pDasarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                pDasarMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pDasarMousePressed(evt);
            }
        });

        tMenu.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        tMenu.setText("Dahboard");

        javax.swing.GroupLayout pDasarLayout = new javax.swing.GroupLayout(pDasar);
        pDasar.setLayout(pDasarLayout);
        pDasarLayout.setHorizontalGroup(
            pDasarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pDasarLayout.createSequentialGroup()
                .addComponent(iconMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(iconSubMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pDasarLayout.setVerticalGroup(
            pDasarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDasarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pDasarLayout.createSequentialGroup()
                .addGroup(pDasarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconSubMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iconMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pDasar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pDasar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private boolean showing = false;
    private void pDasarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pDasarMousePressed
        if (showing) {
            hideMenu();
        } else {
            showMenu();
        }
        if (act != null) {
            act.actionPerformed(null);
        }
    }//GEN-LAST:event_pDasarMousePressed

    private void pDasarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pDasarMouseEntered
       pDasar.setBackground(new Color(102,51,255));
    }//GEN-LAST:event_pDasarMouseEntered

    private void pDasarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pDasarMouseExited
        pDasar.setBackground(new Color(153,153,255));
    }//GEN-LAST:event_pDasarMouseExited
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iconMenu;
    private javax.swing.JLabel iconSubMenu;
    private javax.swing.JPanel pDasar;
    private javax.swing.JLabel tMenu;
    // End of variables declaration//GEN-END:variables

    private void hideMenu() {
        if (!showing) {
            return;  // Jika sudah disembunyikan, jangan lanjutkan
        }
        new Thread(() -> {
            for (int i = subMenu.size() - 1; i >= 0; i--) {
                sleep();
                subMenu.get(i).setVisible(false);
                subMenu.get(i).hideMenu();  // Pastikan submenu juga disembunyikan
            }
            getParent().repaint();
            getParent().revalidate();
            showing = false;
        }).start();
    }

    private void showMenu() {
        if (showing) {
            return;  // Jika sudah ditampilkan, jangan lanjutkan
        }
        showing = true;
        new Thread(() -> {
            for (int i = 0; i < subMenu.size(); i++) {
                sleep();
                subMenu.get(i).setVisible(true);
            }
            getParent().repaint();
            getParent().revalidate();
        }).start();
    }

    private void sleep() {
        try {
            Thread.sleep(20);
        } catch (Exception e) {
        }
    }
}
